var inita = 0;
function delegateService(e) {
    return ["$log", function(t) {
        function n(e) {
            this.handle = e
        }
        var a = this,
            o = this._instances = [];
        this._registerInstance = function(e, t) {
            return e.$$delegateHandle = t, o.push(e),
                function() {
                    var t = o.indexOf(e); - 1 !== t && o.splice(t, 1)
                }
        }, this.$getByHandle = function(e) {
            return e ? new n(e) : a
        }, e.forEach(function(e) {
            n.prototype[e] = function() {
                var n, a, r = this.handle,
                    l = arguments,
                    u = 0;
                return o.forEach(function(t) {
                    t.$$delegateHandle === r && (u++, a = t[e].apply(t, l), 1 === u && (n = a))
                }), u ? n : t.warn('Delegate for handle "' + this.handle + '" could not find a corresponding element with delegate-handle="' + this.handle + '"! ' + e + "() was not called!\nPossible cause: If you are calling " + e + '() immediately, and your element with delegate-handle="' + this.handle + '" is a child of your controller, then your element may not be compiled yet. Put a $timeout around your call to ' + e + "() and try again.")
            }, a[e] = function() {
                var t, n, a = arguments;
                return o.forEach(function(o, r) {
                    n = o[e].apply(o, a), 0 === r && (t = n)
                }), t
            }
        })
    }]
}
angular.module("pdf", []).service("pdfDelegate", delegateService(["prev", "next", "zoomIn", "zoomOut", "zoomTo", "rotate", "getPageCount", "getCurrentPage", "goToPage", "load"])),
angular.module('pdf')
  .controller('PdfCtrl', [
    '$scope',
    '$element',
    '$attrs',
    'pdfDelegate',
    '$log',
    '$q',
  function($scope, $element, $attrs, pdfDelegate, $log, $q) {
    
    



    $scope.$watch(
        "url",
        function ( newValue, oldValue ) {
            //console.log('redo');
            //console.log('sssssssssssss', url);
            // pdfurl-guide.pdf
            // if (inita <= 0) {
            //     url = 
            //     inita++;
            // }
            
            if(newValue) {// Register the instance!
                var deregisterInstance = pdfDelegate._registerInstance(this, $attrs.delegateHandle);
                // De-Register on destory!
                $scope.$on('$destroy', deregisterInstance);

                var self = this;

                var url = newValue;

                var headers = $scope.$eval($attrs.headers);
                var pdfDoc;
                $scope.pageCount = 0;
                var currentPage = 1;
                var angle = 0;
                var scale = $attrs.scale ? $attrs.scale : 1;
                var canvas = $element.find('canvas')[0];
                var ctx = canvas.getContext('2d');

                var renderPage = function(num) {
                  if (!angular.isNumber(num))
                    num = parseInt(num);
                  pdfDoc
                    .getPage(num)
                    .then(function(page) {
                      var viewport = page.getViewport(scale);
                      canvas.height = viewport.height;
                      canvas.width = viewport.width;

                      var renderContext = {
                        canvasContext: ctx,
                        viewport: viewport
                      };

                      page.render(renderContext);
                    });
                };

                var transform = function() {
                  canvas.style.webkitTransform = 'rotate('+ angle + 'deg)';
                  canvas.style.MozTransform = 'rotate('+ angle + 'deg)';
                  canvas.style.msTransform = 'rotate('+ angle + 'deg)';
                  canvas.style.OTransform = 'rotate('+ angle + 'deg)';
                  canvas.style.transform = 'rotate('+ angle + 'deg)';
                };

                self.prev = function() {
                  if (currentPage <= 1)
                    return;
                  currentPage = parseInt(currentPage, 10) - 1;
                  renderPage(currentPage);
                };

                self.next = function() {
                  if (currentPage >= pdfDoc.numPages)
                    return;
                  currentPage = parseInt(currentPage, 10) + 1;
                  renderPage(currentPage);
                };

                self.zoomIn = function(amount) {
                  amount = amount || 0.2;
                  scale = parseFloat(scale) + amount;
                  renderPage(currentPage);
                  return scale;
                };

                self.zoomOut = function(amount) {
                  amount = amount || 0.2;
                  scale = parseFloat(scale) - amount;
                  scale = (scale > 0) ? scale : 0.1;
                  renderPage(currentPage);
                  return scale;
                };

                self.zoomTo = function(zoomToScale) {
                  zoomToScale = (zoomToScale) ? zoomToScale : 1.0;
                  scale = parseFloat(zoomToScale);
                  renderPage(currentPage);
                  return scale;
                };

                self.rotate = function() {
                  if (angle === 0) {
                    angle = 90;
                  } else if (angle === 90) {
                    angle = 180;
                  } else if (angle === 180) {
                    angle = 270;
                  } else {
                    angle = 0
                  }
                  transform();
                };

                self.getPageCount = function() {
                  return $scope.pageCount;
                };

                self.getCurrentPage = function () {
                  return currentPage;
                };

                self.goToPage = function(newVal) {
                  if (pdfDoc !== null) {
                    currentPage = newVal;
                    renderPage(newVal);
                  }
                };

                self.load = function(_url) {
                    console.log(1);
                  if (_url) {
                    url = _url;
                  }

                  var docInitParams = {};

                  if (typeof url === 'string') {
                    docInitParams.url = url;
                    
                  } else {
                    // use Uint8Array or request like `{data: new Uint8Array()}`.  See pdf.js for more details.
                    docInitParams.data = url;
                  }

                  if (headers) {
                    docInitParams.httpHeaders = headers;
                  }

                  //alert(docInitParams.url);
                  console.log(docInitParams);
                  return PDFJS
                    .getDocument(docInitParams)
                    .then(function (_pdfDoc) {

                      pdfDoc = _pdfDoc;
                      renderPage(1);
                      $scope.$apply(function() {
                        $scope.pageCount = _pdfDoc.numPages;
                      });

                    }, function(error) {
                        $log.error(error);
                        return $q.reject(error);
                    })
                };

                // GO --------
                if (url) self.load();
            }
        }
    );
}])

, angular.module("pdf").directive("pdfViewerToolbar", ["pdfDelegate", function(e) {
    return {
        restrict: "E",
        template: '<div class="clearfix mb2">'
                +   '<div class="left">'
                +       '<a href=""ng-click="prev()"class="button py2 m0 button-nav-dark"><</a>'
                +       '<a href=""ng-click="next()"class="button py2 m0 button-nav-dark">></a>'
                +       '<a href=""ng-click="zoomIn()"class="button py2 m0 button-nav-dark">+</a>'
                +       '<a href=""ng-click="zoomOut()"class="button py2 m0 button-nav-dark">-</a>'
                +       '<a href=""ng-click="rotate()"class="button py2 m0 button-nav-dark">Rotate</a>'
                +       '<div class="pageof">'
                +           '<span class="px1">Page</span>'
                +           '<input type="text" class="field-dark" min=1 ng-model="currentPage" ng-change="goToPage()">'
                +           '/ {{pageCount}}'
                +       '</div>'
                +   '</div></div>'
                ,
        scope: {
            pageCount: "="
        },
        link: function(t, n, a) {
            var o = a.delegateHandle;
            t.currentPage = 1, t.prev = function() {
                e.$getByHandle(o).prev(), r()
            }, t.next = function() {
                e.$getByHandle(o).next(), r()
            }, t.zoomIn = function() {
                e.$getByHandle(o).zoomIn()
            }, t.zoomOut = function() {
                e.$getByHandle(o).zoomOut()
            }, t.rotate = function() {
                e.$getByHandle(o).rotate()
            }, t.goToPage = function() {
                e.$getByHandle(o).goToPage(t.currentPage)
            };
            var r = function() {
                t.currentPage = e.$getByHandle(o).getCurrentPage()
            }
        }
    }
}]), angular.module("pdf").directive("pdfViewer", ["$window", "$log", "pdfDelegate", function() {
    return {
        restrict: "E",
        template: '<pdf-viewer-toolbar class="pdf-viewer-toolbar" ng-if="showToolbar" delegate-handle="{{id}}" page-count="pageCount"></pdf-viewer-toolbar>'
                
                +       '<canvas></canvas>'
                ,
        scope: {
            url : '=?'
        },
        async: false,
        controller: "PdfCtrl",
        link: function(scope, element, attrs) {
            //console.log('SA', scope);
            scope.$watch(
                "url",
                function ( newValue, oldValue ) {
                    scope.id = attrs.delegateHandle;
                    scope.showToolbar = scope.$eval(attrs.showToolbar) || false;
                }
            );
            
        }
    }
}]);